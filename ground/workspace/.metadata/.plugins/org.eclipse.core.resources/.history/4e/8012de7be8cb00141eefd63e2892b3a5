//Author: Simon Tran

#include "MainScene.h"
#include "Constants.h"
#include "Design.h"

#define JOYPAD_BG "joystick.png"
#define JOYPAD_THUMB "joy_L.png"
#define JOYPAD_OPACITY 70

Scene* MainScene::createScene() {
	// 'scene' is an autorelease object
	auto scene = Scene::create();

	// 'layer' is an autorelease object
	auto layer = MainScene::create();

	// Add layer as a child to scene
	scene->addChild(layer);

	// Return the scene
	return scene;
}

// On "init" you need to initialize your instance
bool MainScene::init() {
	//Size winSize = Director::getInstance()->getWinSize();

	/*Label *label = Label::create("Http Request Test", "Arial", 28);
	 label->setPosition(Point(winSize.width / 2, winSize.height - 50));
	 addChild(label, 0);

	 Menu *menuRequest = Menu::create();
	 menuRequest->setPosition(Point::ZERO);
	 addChild(menuRequest);

	 // Get
	 Label *labelGet = Label::create("Test Get", "Arial", 22);
	 MenuItemLabel *itemGet = MenuItemLabel::create(labelGet, this,
	 menu_selector(MainScene::onMenuGetTestClicked));
	 itemGet->setPosition(Point(winSize.width / 2, winSize.height - 100));
	 menuRequest->addChild(itemGet);

	 // Post
	 Label *labelPost = Label::create("Test Post", "Arial", 22);
	 MenuItemLabel *itemPost = MenuItemLabel::create(labelPost, this,
	 menu_selector(MainScene::onMenuPostTestClicked));
	 itemPost->setPosition(Point(winSize.width / 2, winSize.height - 150));
	 menuRequest->addChild(itemPost);

	 // Response Code Label
	 m_labelStatusCode = Label::create("HTTP Status Code", "Marker Felt", 20);
	 m_labelStatusCode->setPosition(
	 Point(winSize.width / 2, winSize.height - 250));
	 addChild(m_labelStatusCode);*/

	Design *order = Design::create();

	auto *bg = Sprite::create("logo.jpg");
	bg->setAnchorPoint(Point::ZERO);
	order->setScaleX((CCLayer*) bg);
	order->setScaleY((CCLayer*) bg);
	bg->setPosition(Point::ZERO);
	this->addChild(bg);

	auto *titleLabel = CCLabelTTF::create("EdiDrone", "Vitamin.ttf", 72);
	titleLabel->setAnchorPoint(CCPointZero);
	titleLabel->setPosition(
			ccp(order->scenterx((CCLayer*) titleLabel),
					order->sinsideTop((CCLayer*) titleLabel)));
	titleLabel->setFontFillColor(ccYELLOW);
	this->addChild(titleLabel);

	// Left
	ljoypadBG = Sprite::create(JOYPAD_BG);
	// joypadBG->setOpacity(JOYPAD_OPACITY);
	ljoypadThumb = Sprite::create(JOYPAD_THUMB);
	// joypadThumb->setOpacity(JOYPAD_OPACITY);

	lbaseStick = SneakyJoystickSkinnedBase::create();

	ljoypad = SneakyJoystick::create(D_LEFT);
	ljoypad->initWithRect(
			Rect(0, 0, ljoypadBG->getContentSize().width,
					ljoypadBG->getContentSize().height));
	ljoypad->autorelease();

	lbaseStick->setBackgroundSprite(ljoypadBG);
	lbaseStick->setThumbSprite(ljoypadThumb);
	lbaseStick->setJoystick(ljoypad);
	lbaseStick->setAnchorPoint(Point::ZERO);
	lbaseStick->setPosition(
			Point(order->slcenterx((Layer*) ljoypadBG, 0.9f) + 190,
					order->scentery((Layer*) ljoypadBG)));

	ljoypad = lbaseStick->getJoystick();
	ljoypad->setEnabled(false);
	ljoypad->setBaseStick(lbaseStick);
	ljoypad->start();
	addChild(lbaseStick);

	// Right
	rjoypadBG = Sprite::create(JOYPAD_BG);
	// joypadBG->setOpacity(JOYPAD_OPACITY);
	rjoypadThumb = Sprite::create(JOYPAD_THUMB);
	// joypadThumb->setOpacity(JOYPAD_OPACITY);

	rbaseStick = SneakyJoystickSkinnedBase::create();

	rjoypad = SneakyJoystick::create(D_RIGHT);
	rjoypad->initWithRect(
			Rect(0, 0, rjoypadBG->getContentSize().width,
					rjoypadBG->getContentSize().height));
	rjoypad->autorelease();

	rbaseStick->setBackgroundSprite(rjoypadBG);
	rbaseStick->setThumbSprite(rjoypadThumb);
	rbaseStick->setJoystick(rjoypad);
	rbaseStick->setAnchorPoint(Point::ZERO);
	rbaseStick->setPosition(
			Point(order->srcenterx((Layer*) rjoypadBG, 0.9f) + 5,
					order->scentery((Layer*) rjoypadBG)));

	rjoypad = rbaseStick->getJoystick();
	rjoypad->setEnabled(false);
	rjoypad->setBaseStick(rbaseStick);
	rjoypad->start();
	addChild(rbaseStick);

	return true;
}

void MainScene::onMenuGetTestClicked(Ref *sender) {
	{
		HttpRequest* request = new HttpRequest();
		request->setUrl("http://executive.nese.com/test.php");
		request->setRequestType(HttpRequest::Type::GET);
		request->setResponseCallback(this,
				callfuncND_selector(MainScene::onHttpRequestCompleted));
		request->setTag("GET test1");
		HttpClient::getInstance()->send(request);
		request->release();
	}

	// waiting
	m_labelStatusCode->setString("waiting...");
}

void MainScene::onMenuPostTestClicked(Ref *sender) {
	{
		HttpRequest* request = new HttpRequest();
		request->setUrl("http://hyenacode.com/test/log.php");
		request->setRequestType(HttpRequest::Type::POST);
		request->setResponseCallback(this,
				callfuncND_selector(MainScene::onHttpRequestCompleted));

		// Write the post data
		const char* postData = "name=bob&position=21";
		request->setRequestData(postData, strlen(postData));

		request->setTag("POST test1");
		HttpClient::getInstance()->send(request);
		request->release();
	}
}

void MainScene::onHttpRequestCompleted(Node *sender, void *data) {
	HttpResponse *response = (HttpResponse*) data;

	if (!response) {
		return;
	}

	// You can get original request type from: response->request->reqType
	if (0 != strlen(response->getHttpRequest()->getTag())) {
		//CCLog("test123 %s completed", response->getHttpRequest()->getTag());
	}

	int statusCode = response->getResponseCode();
	char statusString[64] = { };
	sprintf(statusString, "HTTP Status Code: %d, tag = %s", statusCode,
			response->getHttpRequest()->getTag());
	m_labelStatusCode->setString(statusString);

	if (!response->isSucceed()) {
		//CCLog("test123 error buffer: %s", response->getErrorBuffer());
		return;
	}

	// Dump data
	vector<char> *buffer = response->getResponseData();
	string s = string((*buffer).begin(), (*buffer).end());
	/*for (unsigned int i = 0; i < buffer->size(); i++) {
	 printf("%c", (*buffer)[i]);
	 }*/
	fflush(stdout);
}

void MainScene::menuCloseCallback(Ref* pSender) {
#if (CC_TARGET_PLATFORM == CC_PLATFORM_WP8) || (CC_TARGET_PLATFORM == CC_PLATFORM_WINRT)
	MessageBox("You pressed the close button. Windows Store Apps do not implement a close button.","Alert");
	return;
#endif

	Director::getInstance()->end();

#if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
	exit(0);
#endif
}
